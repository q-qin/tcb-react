{"version":3,"sources":["config/index.ts","utils/index.ts","pages/Home.tsx","components/DemoWrapper.tsx","pages/FunctionDemo.tsx","routes/config.ts","pages/DatabaseDemo.tsx","pages/404.tsx","routes/index.tsx","layout/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["config","envId","require","storageBaseUrl","getApp","app","window","tcb","init","env","auth","persistence","Search","DemoWrapper","props","className","title","children","DemoBase64","useState","result","setResult","placeholder","enterButton","size","onSearch","base64","callFunction","name","data","str","then","res","catch","err","message","error","appRoutes","path","component","loginLoading","setLoginLoading","login","getLoginState","customLogin","userId","a","headers","origin","status","Error","statusText","JSON","parse","body","console","log","info","anonymousAuthProvider","signIn","location","reload","style","height","width","src","alt","type","href","target","span","offset","showIcon","loading","menu","collection","database","poem","setPoem","total","setTotal","list","setList","insertData","fetch","json","stringify","add","success","queryData","get","length","onClick","overflowY","header","bordered","dataSource","renderItem","item","Item","content","author","subTitle","extra","RenderRoutes","map","route","index","key","exact","strict","Sider","Header","Content","Footer","MainLayout","history","useHistory","menus","year","Date","getFullYear","padding","display","flexDirection","flex","background","mode","onSelect","push","overflow","textAlign","filter","App","setLoading","script","document","createElement","head","appendChild","Promise","resolve","onload","loadScript","active","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca1a5dd3.chunk.js","sourcesContent":["/* eslint-disable */\nconst cloudbaseConfig = require('../../cloudbaserc')\n\nexport const config = {\n  envId: cloudbaseConfig.envId,\n  storageBaseUrl: ''\n}\n","import { config } from '@/config'\n\nexport const getApp = () => {\n  const app = window.tcb.init({\n    env: config.envId\n  })\n\n  app.auth({\n    persistence: 'local'\n  })\n  return app\n}\n","import React, { useState } from 'react'\nimport { Row, Col, Button, Input, Alert, message } from 'antd'\nimport { getApp } from '@/utils'\nimport { config } from '@/config'\n\nconst { Search } = Input\n\nconst ticketUrl = `https://${config.envId}.service.tcloudbase.com/login`\n\nexport const Home: React.FC<{}> = () => {\n  const app = getApp()\n  const [loginLoading, setLoginLoading] = useState(false)\n\n  // 检测登录状态\n  const loginState = app.auth().getLoginState()\n  const login = !!loginState\n  const customLogin = async (userId: string) => {\n    if (!userId) {\n      message.error('用户名不能为空！')\n      return\n    }\n\n    setLoginLoading(true)\n    const {result} = await app.callFunction({\n      name: \"custom-login\",\n      data:{userId:userId,headers:{origin:''}}\n    })\n    if (result.status === 400) {\n      throw new Error(`${result.status}: ${result.statusText} 获取 Ticket 失败，用户 Id 不符合规则`)\n    }\n    const data = await JSON.parse(result.body)\n    console.log(data);\n    message.info('登录成功！')\n    setLoginLoading(false)\n    const auth = app.auth()\n    await auth.anonymousAuthProvider().signIn();\n    window.location.reload()\n  }\n\n  return (\n    <div>\n      <div className=\"text-center\">\n        <img\n          style={{ height: '200px', width: '200px' }}\n          src={`${config.storageBaseUrl}/icon.png`}\n          alt=\"Logo 图片\"\n        />\n        <div className=\"margin-bottom-sm\">\n          <Button\n            className=\"text-df\"\n            type=\"link\"\n            href=\"https://cloud.tencent.com/product/tcb\"\n            target=\"_blank\"\n          >\n            云开发 Web 端示例\n          </Button>\n        </div>\n      </div>\n      <Row>\n        <Col span={8} offset={8}>\n          {!login && (\n            <Alert\n              message=\"你还没有登录，使用前请先登录！\"\n              type=\"warning\"\n              showIcon\n              className=\"margin-bottom\"\n            />\n          )}\n          {login && (\n            <Alert\n              message=\"你已登录，无需再次登录！\"\n              type=\"info\"\n              showIcon\n              className=\"margin-bottom\"\n            />\n          )}\n        </Col>\n      </Row>\n      <Row>\n        <Col span={12} offset={6}>\n          <Search\n            size=\"middle\"\n            placeholder=\"输入你的用户名，用户名长度必须大于 4 位，由字母和数字组成\"\n            enterButton=\"自定义登录\"\n            loading={loginLoading}\n            onSearch={customLogin}\n          />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const DemoWrapper: React.SFC<{ title: string }> = (props) => {\n  return (\n    <div className=\"demo\">\n      <div className=\"margin-bottom-sm text-xs\">{props.title}</div>\n      <div className=\"demo-content\">{props.children}</div>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Input, Divider, message } from 'antd'\nimport { DemoWrapper } from '@/components'\nimport { getApp } from '../utils'\n\nconst { Search } = Input\n\nconst DemoBase64: React.FC<{}> = () => {\n  const [result, setResult] = useState('')\n  const app = getApp()\n\n  const getBase64Encoding = (base64: string) => {\n    if (!base64) {\n      message.error('Base64 字符串不能为空！')\n      return\n    }\n\n    app\n      .callFunction({\n        name: 'base64',\n        data: {\n          str: base64\n        }\n      })\n      .then((res: any) => {\n        setResult(res.result.data)\n      })\n      .catch((err: any) => {\n        message.error(err.message)\n      })\n  }\n\n  return (\n    <DemoWrapper title=\"Base64 编码\">\n      <div>\n        <Search\n          placeholder=\"输入要编码的字符串\"\n          enterButton=\"计算\"\n          size=\"large\"\n          onSearch={getBase64Encoding}\n        />\n        <div className=\"margin-top-sm\">Output：{result}</div>\n      </div>\n      <Divider />\n    </DemoWrapper>\n  )\n}\n\nexport const FunctionDemo: React.FC<{}> = () => {\n  return (\n    <div>\n      <div className=\"text-center text-sm text-bold\">云函数</div>\n      <Divider />\n      <DemoBase64 />\n    </div>\n  )\n}\n","import { RouteProps } from 'react-router'\nimport { Home, NoFoundPage, FunctionDemo, DatabaseDemo } from '../pages'\n\nexport interface IRouteProps extends RouteProps {\n  menu?: boolean\n  title?: string\n}\n\n\nexport const appRoutes: IRouteProps[] = [\n  {\n    path: '/',\n    component: Home\n  },\n  {\n    title: '云函数',\n    path: '/function',\n    component: FunctionDemo,\n    menu: true\n  },\n  {\n    title: '数据库',\n    path: '/db',\n    component: DatabaseDemo,\n    menu: true\n  },\n  {\n    path: '**',\n    component: NoFoundPage\n  }\n]\n","import React, { useState } from 'react'\nimport { Button, List, message } from 'antd'\nimport { DemoWrapper } from '@/components'\nimport { getApp } from '@/utils'\n\nexport const DatabaseDemo: React.FC<{}> = () => {\n  const app = getApp()\n  const db = app.database()\n  const collection = db.collection('demo_web')\n  const [poem, setPoem] = useState('')\n  const [total, setTotal] = useState(0)\n  const [list, setList] = useState([])\n\n  const dataOrigin = 'https://v1.jinrishici.com/all.json'\n\n  const insertData = async () => {\n    const res = await fetch(dataOrigin)\n    const data = await res.json()\n    setPoem(JSON.stringify(data))\n    await collection.add(data)\n    message.success('添加数据成功！')\n  }\n\n  const queryData = async () => {\n    const res = await collection.get()\n    const total = res.data?.length || 0\n    setTotal(total)\n    setList(res.data)\n  }\n\n  return (\n    <div>\n      <div className=\"text-center text-sm text-bold\">数据库</div>\n      <DemoWrapper title=\"数据库读\">\n        <div className=\"json flex flex-direction\">\n          <div className=\"operations padding-bottom\">\n            <Button type=\"primary\" onClick={insertData}>\n              新增数据\n            </Button>\n            <div className=\"padding-sm\">{poem}</div>\n          </div>\n        </div>\n      </DemoWrapper>\n\n      <DemoWrapper title=\"数据库读\">\n        <div className=\"json flex flex-direction\">\n          <div className=\"operations padding-bottom-sm\">\n            <Button type=\"primary\" onClick={queryData}>\n              获取数据\n            </Button>\n          </div>\n          <List\n            style={{ height: '300px', overflowY: 'scroll' }}\n            header={<div className=\"padding-sm\">总计数量：{total}</div>}\n            bordered\n            dataSource={list}\n            renderItem={(item: any) => (\n              <List.Item>\n                <div style={{ width: '100%' }}>\n                  <h1 className=\"text-center\">{item.origin}</h1>\n                  <p className=\"text-center\">{item.content}</p>\n                  <p className=\"text-right\">{item.author}</p>\n                </div>\n              </List.Item>\n            )}\n          />\n        </div>\n      </DemoWrapper>\n    </div>\n  )\n}\n","import { Result } from 'antd'\nimport React from 'react'\n\nexport const NoFoundPage: React.FC<{}> = () => (\n  <Result\n    status=\"404\"\n    title=\"404\"\n    subTitle=\"Sorry, the page you visited does not exist.\"\n    extra={<span>Back Home</span>}\n  />\n)\n\n","import React from 'react'\nimport { Switch, Route, RouteProps } from 'react-router-dom'\nimport { appRoutes } from './config'\nexport * from './config'\n\nfunction SwitchRoutes(appRoutes: RouteProps[]) {\n  return (\n    <Switch>\n      {appRoutes.map((route, index) => (\n        <Route\n          key={index}\n          path={route.path}\n          component={route.component}\n          exact={route.exact || true}\n          strict={route.strict || false}\n        />\n      ))}\n    </Switch>\n  )\n}\n\nexport function RenderRoutes() {\n  return SwitchRoutes(appRoutes)\n}\n","import React from 'react'\nimport { Layout, Menu, Card, Avatar } from 'antd'\nimport { useHistory } from 'react-router'\nimport { IRouteProps } from '@/routes/config'\nimport { config } from '@/config'\nimport './index.less'\n\nconst { Sider, Header, Content, Footer } = Layout\n\nexport interface ILayoutProps {\n  menus: IRouteProps[]\n}\n\nexport function MainLayout(props: React.PropsWithChildren<ILayoutProps>) {\n  const history = useHistory()\n  const { menus } = props\n\n  const year = new Date().getFullYear()\n\n  return (\n    <div className=\"App\">\n      <Layout style={{ height: '100%' }}>\n        <Header className=\"header flex\">\n          <div className=\"logo\">\n            <Avatar\n              style={{ height: '40px', width: '40px' }}\n              src={`${config.storageBaseUrl}/icon.png`}\n            />\n          </div>\n          <div className=\"home\">\n            <a href=\"/\">Home</a>\n          </div>\n        </Header>\n        <Content style={{ padding: '0 50px', display: 'flex', flexDirection: 'column' }}>\n          <Layout style={{ padding: '24px 0', flex: '1 1 auto', background: '#fff' }}>\n            <Sider\n              width={200}\n              style={{\n                background: '#fff'\n              }}\n            >\n              <Menu\n                mode=\"inline\"\n                onSelect={({ key }) => {\n                  history.push(key as string)\n                }}\n              >\n                {menus.map((menu) => (\n                  <Menu.Item key={menu.path as string}>\n                    <span className=\"nav-text\">{menu.title}</span>\n                  </Menu.Item>\n                ))}\n              </Menu>\n            </Sider>\n            <Content style={{ padding: '0 24px' }}>\n              <Card className=\"card\" bordered={false}>\n                <div className=\"card-content\" style={{ overflow: 'auto' }}>\n                  {props.children}\n                </div>\n              </Card>\n            </Content>\n          </Layout>\n        </Content>\n        <Footer className=\"footer\" style={{ textAlign: 'center' }}>\n          Copyright &copy; 腾讯云 - 云开发 2018 - {year}\n        </Footer>\n      </Layout>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Skeleton } from 'antd'\nimport { BrowserRouter } from 'react-router-dom'\nimport { RenderRoutes, appRoutes } from './routes'\nimport { MainLayout } from './layout'\nimport 'antd/dist/antd.css'\nimport './App.less'\n\nconst menus = appRoutes.filter((item) => item.menu)\n\nfunction App() {\n  const [loading, setLoading] = useState(true)\n  const loadScript = async () => {\n    const script = document.createElement('script')\n    script.type = 'text/javascript'\n    script.src = 'https://imgcache.qq.com/qcloud/tcbjs/1.5.0/tcb.js'\n    document.head.appendChild(script)\n\n    return new Promise<void>((resolve) => {\n      script.onload = () => {\n        resolve()\n      }\n    })\n  }\n\n  loadScript().then(() => {\n    setLoading(false)\n  })\n\n  return (\n    <div className=\"App\">\n      <MainLayout menus={menus}>{loading ? <Skeleton active /> : RenderRoutes()}</MainLayout>\n    </div>\n  )\n}\n\nexport default () => {\n  return (\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as online.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './index.less'\n\ndeclare global {\n  interface Window {\n    tcb: any\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}